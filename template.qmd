---
title: "Lab 5: Sea-Level Rise"
author: "Jonathan Gan wg18"
jupyter: julia-1.10
date: 2024-02-16

format: 
    html: default
    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    # docx: 
    #     toc: true
    #     fig-format: png
    #     number-sections: true
    #     code-line-numbers: true

date-format: "ddd., MMM. D"
bibliography: references.bib
---

# Setup

## The usual

As always:

1. Clone the lab repository to your computer
1. Open the lab repository in VS Code
1. Open the Julia REPL and activate, then instantiate, the lab environment
1. Make sure you can render: `quarto render template.qmd` in the terminal.
    - If you run into issues, try running `] build IJulia` in the Julia REPL (`]` enters the package manager).
    - If you still have issues, try opening up `blankfile.py`. That should trigger VS Code to give you the option to install the Python extension, which you should do. Then you should be able to open a menu in the bottom right of your screen to select which Python installation you want VS Code to use.


## Load packages

```{julia}
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using Plots
using StatsPlots
using Unitful

Plots.default(; margin=5Plots.mm)
```

## Local package

```{julia}
using Revise
using HouseElevation
```

## House
```{julia}
house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    id = 140
    row = @rsubset(haz_fl_dept, :DmgFnId == id)[1, :] # select the row I want
    area = 1200u"ft^2"
    height_above_gauge = 2u"ft"
    House(
        row;
        area=area,
        height_above_gauge=height_above_gauge,
        value_usd=400_000,
    );
end
```
I obtained the house value and area from Zillow, where a 1500sqft house in the vicinity of the gauge had a value of approximately $400k. I used a depth damage function from the USACE Galveston data set to ensure that the function would be most appropriate for the locality that my chosen house is located in, and the structure of the house also matches the description of the depth damage function (two stories, no basement).

## Depth Damage Curve
```{julia}
let
    depths = uconvert.(u"ft", (-7.0u"ft"):(1.0u"inch"):(30.0u"ft"))
    damages = house.ddf.(depths) ./ 100
    damages_1000_usd = damages .* house.value_usd ./ 1000
    scatter(
        depths,
        damages_1000_usd;
        xlabel="Flood Depth",
        ylabel="Damage (Thousand USD)",
        label="$(house.description)\n($(house.source))",
        legend=:bottomright,
        size=(800, 400),
        yformatter=:plain, # prevents scientific notation
    )
end
```

## Elevation Cost
```{julia}
let
    elevations = 0u"ft":0.25u"ft":14u"ft"
    costs = [elevation_cost(house, eᵢ) for eᵢ in elevations]
    scatter(
        elevations,
        costs ./ 1_000;
        xlabel="Elevation",
        ylabel="Cost (Thousand USD)",
        label="$(house.description)\n($(house.source))",
        legend=:bottomright,
        size=(800, 400),
        yformatter=:plain, # prevents scientific notation
    )
    
end
```

## Sea Level Data
```{julia}
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end
println("There are $(length(slr_scenarios)) parameter sets")
```

## Storm Surge and Discount Rate
```{julia}
function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.5))
    ξ = rand(Normal(0.1, 0.05))
    GeneralizedExtremeValue(μ, σ, ξ)
end

[draw_surge_distribution() for _ in 1:1000]

function draw_discount_rate()
    return rand(Normal(0.04, 0.02))
end
```

## Single simulation
```{julia}
p = ModelParams(
    house=house,
    years=2024:2100
)

sow = SOW(
    rand(slr_scenarios),
    draw_surge_distribution(),
    draw_discount_rate()
)

a = Action(5.0u"ft")

res = run_sim(a, sow, p)
```

## Large simulations
```{julia}
sows = [SOW(rand(slr_scenarios), draw_surge_distribution(), draw_discount_rate()) for _ in 1:11] 
range = 0u"ft":1u"ft":10u"ft"
actions = [Action(height) for height in range] 
results = [run_sim(a, s, p) for (a, s) in zip(actions, sows)]

df = DataFrame(
    npv=results,
    Δh_ft=[a.Δh_ft for a in actions],
    slr_a=[s.slr.a for s in sows],
    slr_b=[s.slr.b for s in sows],
    slr_c=[s.slr.c for s in sows],
    slr_tstar=[s.slr.tstar for s in sows],
    slr_cstar=[s.slr.cstar for s in sows],
    surge_μ=[s.surge_dist.μ for s in sows],
    surge_σ=[s.surge_dist.σ for s in sows],
    surge_ξ=[s.surge_dist.ξ for s in sows],
    discount_rate=[s.discount_rate for s in sows],
)
```
I chose to sample a range of actions from 0ft to 10ft to determine the elevation at which would bring the greatest benefit to the house. 

## Analysis
From my analysis, it appears that there is no noticable correlation between the height of elevating my house to gaining benefit. In fact, all the NPVs that I've calculated are negative. However, through my iterations it appears that elevating the house higher would result in a less negative NPV. 

The most important parameters other than the height of elevating our houses is the distribution of storm surges. With this model, it is not very sophisticated and we're just using standard distributions to attempt to model a typical storm surge without accounting for the actual weather and storm conditions at our house location.

If I had unlimited computing power, I would try to run more simulations, but not before refining the model to include better distributions of storm surges and discount rates to ensure that the distributions that are used can accurately depict conditions at my chosen house.

These results, particularly in my case of having negative NPVs, suggest that sometimes inaction might make the mose sense on the individual level, since it would not make financial sense to spend money on elevating houses that are already at high risk of being damaged by future storm surges due to their location and geography. Rather, we should explore developing zoning policies and making choices that would have us build in locations that do not have these weather risks, and thus we are able to build cities that would become more resillient to climate change. 

